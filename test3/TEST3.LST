Microsoft (R) Macro Assembler Version 6.11		    05/30/22 17:10:28
test3.asm						     Page 1 - 1


				;默认采用ML6.11汇编程序
 0000				DATAS SEGMENT
				    ;此处输入数据段代码 
 0000 59 6F 75 72 20 46		TIPS1 DB 'Your First String:',13,10,'$'
       69 72 73 74 20 53
       74 72 69 6E 67 3A
       0D 0A 24
 0015 59 6F 75 72 20 53		TIPS2 DB 'Your Second String:',13,10,'$'
       65 63 6F 6E 64 20
       53 74 72 69 6E 67
       3A 0D 0A 24
 002B 45 72 72 6F 72 20		TIPS3 DB 'Error Input! Try again!',13,10,'$'
       49 6E 70 75 74 21
       20 54 72 79 20 61
       67 61 69 6E 21 0D
       0A 24
 0045 43 6F 72 72 65 73		TIPS_B  DB 'Corresponding Binary Number: $'
       70 6F 6E 64 69 6E
       67 20 42 69 6E 61
       72 79 20 4E 75 6D
       62 65 72 3A 20 24
 0063 43 6F 72 72 65 73		TIPS_D  DB 'Corresponding Decimal Number: $'
       70 6F 6E 64 69 6E
       67 20 44 65 63 69
       6D 61 6C 20 4E 75
       6D 62 65 72 3A 20
       24
 0082 4E 4F 0D 0A 24		TIPS_NO DB 'NO',13,10,'$'
 0087 FF			BUF1  DB 255          ;存第一个数
 0088  00			      DB ?
 0089  00FF [			      DB 255 DUP('$')
        24
       ]
 0188 FF			BUF2  DB 255          ;存第二个数
 0189  00			      DB ?
 018A  00FF [			      DB 255 DUP('$')
        24
       ]
 0289  00FF [			BINARY_BUF DB 255 DUP('$') ;存转换后的二进制数
        24
       ]
 0388  0006 [			DECIMAL_BUF DB 6 DUP('$')  ;存转换后的十进制数
        24
       ]
 038E 00			NUM DB 0                ;记录偶数个数
 038F 0A 0D 24			LINE  DB 0AH,0DH,'$'   ;换行
 0392				DATAS ENDS

 0000				STACKS SEGMENT
				    ;此处输入堆栈段代码
 0000  0020 [			    DW 20H DUP(0)
        0000
       ]
 0040				STACKS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
				    ;此处输入代码段代码
				    
 0005  8D 16 0000 R		    LEA DX,TIPS1  ;输出提示语1
 0009  B4 09			    MOV AH,9
 000B  CD 21			    INT 21H
				    
 000D  8D 1E 0087 R		    LEA  BX,BUF1  ;BX指向BUF1
 0011  E8 0072			    CALL INPUT  ;输入第一个数
 0014  81 F9 00FF		    CMP CX,0FFH ;若CX被置为0FFH则不合法
 0018  75 03 E9 015E		    JZ OVER
 001D  E8 005D			    CALL PRINT_LINE  ;换行
				    
 0020				STEP1:
 0020  8D 16 0015 R		    LEA DX,TIPS2  ;输出提示语2
 0024  B4 09			    MOV AH,9
 0026  CD 21			    INT 21H
				    
 0028  8D 1E 0188 R		    LEA  BX,BUF2  ;BX指向BUF2
 002C  E8 0057			    CALL INPUT  ;输入第二个数
 002F  81 F9 00FF		    CMP CX,0FFH
 0033  74 EB			    JZ STEP1     ;若第二个数不合法则重新输入第二个数
				    
 0035  E8 0045			    CALL PRINT_LINE  ;换行
				    
 0038  8D 1E 0089 R		    LEA  BX,BUF1+2       ;BX指向字符串起始地址，从偏移量为2的地方开始
 003C  E8 0082			    CALL PRINT_BINARY   ;输出第一个数的二进制形式
				    
 003F  C6 06 038E R 00		    MOV NUM,0            ;偶数个数置为0
 0044  A0 029B R		    MOV AL,BINARY_BUF[18] ;AL取数组最后一个元素
 0047  24 01			    AND AL,1              ;和1按位与后只保留最后一位
 0049  3C 01			    CMP AL,1              ;比较末位是否为1，若是则跳转
 004B  74 07			    JZ STEP2
 004D  FE 06 038E R		    INC NUM              ;末位为0，偶数个数加1
 0051  E8 00E1			    CALL PRINT_DECIMAL   ;输出该数的十进制形式
				    
 0054				STEP2:
 0054  8D 1E 018A R		    LEA  BX,BUF2+2
 0058  E8 0066			    CALL PRINT_BINARY    ;输出第二个数的二进制形式
 005B  A0 029B R		    MOV AL,BINARY_BUF[18] ;AL取数组最后一个元素
 005E  24 01			    AND AL,1           ;和1按位与后只保留最后一位
 0060  3C 01			    CMP AL,1          ;比较末位是否为1，若是则跳转
 0062  74 07			    JZ STEP3
 0064  FE 06 038E R		    INC NUM            ;末位为0，偶数个数加1
 0068  E8 00CA			    CALL PRINT_DECIMAL   ;输出该数的十进制形式

 006B				STEP3:
 006B  80 3E 038E R 00			CMP NUM,0      ;若偶数个数不为0，则跳转结束
 0070  75 08				JNZ OVER3
 0072  8D 16 0082 R			LEA DX,TIPS_NO  ;偶数个数为0，输出提示语
 0076  B4 09			    MOV AH,9
 0078  CD 21			    INT 21H
					   
 007A				OVER3:    
 007A  E9 00FE			    JMP OVER
				      
				;换行  
 007D				PRINT_LINE PROC
 007D  8D 16 038F R			LEA DX,LINE   ;换行
 0081  B4 09			    MOV AH,9
 0083  CD 21			    INT 21H
 0085  C3				RET
 0086				PRINT_LINE ENDP

				;输入并检查合法性     
 0086				INPUT PROC
 0086  8B D3			 	MOV DX,BX   ;输入字符串
 0088  B4 0A			    MOV AH,10   
 008A  CD 21			    INT 21H
					
 008C  BE 0001				MOV SI,1
 008F  8A 08				MOV CL,[BX][SI] ;寄存器相对寻址
 0091  80 F9 04				CMP CL,4       ;若长度不为4则非法
 0094  75 1F				JNE ERROR
 0096				CHECK:
 0096  46				INC SI        ;字符串从偏移量为2的地方开始
 0097  8A 00				MOV AL,[BX][SI]
 0099  3C 30				CMP AL,30H   ;若小于0则非法
 009B  72 18				JB ERROR
 009D  3C 39				CMP AL,39H   ;若小于9则合法
 009F  76 10				JNA AGAIN 
 00A1  3C 41				CMP AL,41H   ;大于9且小于A则非法
 00A3  72 10				JB ERROR
 00A5  3C 46				CMP AL,46H   ;若小于F则合法
 00A7  76 08				JNA AGAIN
 00A9  3C 61				CMP AL,61H   ;大于f小于a非法
 00AB  72 08				JB ERROR    
 00AD  3C 66				CMP AL,66H   ;大于f非法
 00AF  77 04				JA ERROR
 00B1				AGAIN:
 00B1  E2 E3				LOOP CHECK    ;继续检查下一个字符
 00B3  EB 0B				JMP OVER1
 00B5				ERROR:
 00B5  8D 16 002B R			LEA DX,TIPS3  ;输出提示语3
 00B9  B4 09			    MOV AH,9
 00BB  CD 21			    INT 21H
				    
 00BD  B9 00FF				MOV CX,0FFH ;置CX为0FFH
 00C0				OVER1:
 00C0  C3				RET        ;返回
 00C1				INPUT ENDP

				;以二进制形式输出
 00C1				PRINT_BINARY PROC
				;循环四次将输入字符转为对应十六进制
 00C1  B9 0004				MOV CX,4     
 00C4  BE 0000				MOV SI,0     ;SI为BX偏移量
 00C7				COMPER1:
 00C7  8A 00				MOV AL,[BX][SI] ;AL依次存放每个字符
 00C9  3C 39				CMP AL,39H    ;判断是否为数字
 00CB  76 08				JNA CHANGE1
 00CD  3C 46				CMP AL,46H   ;判断是否为大写字母A-F
 00CF  76 08				JNA CHANGE2
 00D1  3C 66				CMP AL,66H   ;判断是否为小写字母a-f
 00D3  76 08				JNA CHANGE3
 00D5				CHANGE1:
 00D5  2C 30				SUB AL,30H    ;若为数字，减30H由ASCII转换为实际数字
 00D7  EB 06				JMP LOP
 00D9				CHANGE2:
 00D9  2C 37				SUB AL,37H    ;若为A-F，减37H由ASCII转换为实际数字
 00DB  EB 02				JMP LOP
 00DD				CHANGE3:
 00DD  2C 57				SUB AL,57H    ;若为a-f，减57H由ASCII转换为实际数字
 00DF				LOP:
 00DF  88 00				MOV [BX][SI],AL  ;将转换后的十六进制存入原数组
 00E1  46				INC SI
 00E2  E2 E3				LOOP COMPER1     ;继续比较和转换下一个字符
					
				;将十六进制转为二进制输出    
 00E4  BA 0000				MOV DX,0       ;外循环次数
 00E7  BE 0000				MOV SI,0       
 00EA				TRANS1:
 00EA  B9 0004				MOV CX,4       ;内循环次数
 00ED  8A 00				MOV AL,[BX][SI]
 00EF  D0 C0				ROL AL,1       ;循环移位四次，使AL低四位左移到高四位
 00F1  D0 C0				ROL AL,1
 00F3  D0 C0				ROL AL,1
 00F5  D0 C0				ROL AL,1
 00F7  56				PUSH SI      ;保存，因为下面会使SI和AL值改变
 00F8  50				PUSH AX
 00F9  8B C2				MOV AX,DX     ;AX存放外循环次数
 00FB  8B F0				MOV SI,AX     ;先将AX保存在SI中
 00FD  D1 E0				SAL AX,1      ;左移一位相当于*2
 00FF  D1 E0				SAL AX,1
 0101  03 F0				ADD SI,AX    ;因为每个十六进制数转为4位二进制数
 0103  58				POP AX       ;存完4位后加个空格以便输出，所以SI=DX*5
 0104				TRANS2:	
 0104  D0 C0				ROL AL,1     ;左移一位
 0106  52				PUSH DX      ;保存DX
 0107  B2 00				MOV DL,0     ;DL清零
 0109  80 D2 30				ADC DL,30H   ;DL<-(DL)+30H+CF
 010C  88 94 0289 R			MOV BINARY_BUF[SI],DL  ;存入每位二进制数
 0110  46				INC SI
 0111  5A				POP DX       ;恢复DX
 0112  E2 F0				LOOP TRANS2  ;继续内循环
 0114  C6 84 0289 R 20			MOV BINARY_BUF[SI],' ' ;加个空格以便校对
 0119  5E				POP SI      ;恢复SI
 011A  42				INC DX      ;外循环次数+1
 011B  46				INC SI     ;偏移量+1
 011C  83 FA 04				CMP DX,4   ;4个十六进制数，所以外循环四次，没到四次继续循环
 011F  72 C9				JB TRANS1  
						
					;MOV BINARY_BUF[SI],'$'	
 0121  8D 16 0045 R			LEA DX,TIPS_B ;输出提示语
 0125  B4 09			    MOV AH,9
 0127  CD 21			    INT 21H
					
 0129  8D 16 0289 R			LEA DX,BINARY_BUF ;输出二进制
 012D  B4 09			    MOV AH,9
 012F  CD 21			    INT 21H
 0131  E8 FF49			    CALL PRINT_LINE   ;换行
 0134				OVER2:
 0134  C3				RET    ;返回
 0135				PRINT_BINARY ENDP

 0135				PRINT_DECIMAL PROC
 0135  33 C0				XOR AX,AX   ;清零
 0137  BE 0000				MOV SI,0    ;SI为BX偏移量
 013A				TO_BIN:
 013A  33 D2				XOR DX,DX     ;清零
 013C  8A 10				MOV DL,[BX][SI]  ;DL存每一个已转换后的十六进制数
 013E  B1 04				MOV CL,4         
 0140  D3 E0				SHL AX,CL        ;AX左移4位
 0142  03 C2				ADD AX,DX        ;低4位加上每个十六进制数
 0144  46				INC SI
 0145  83 FE 04				CMP SI,4         ;共循环四次 
 0148  75 F0				JNZ TO_BIN       ;循环结束后AX存放的是四位十六进制数

 014A  BE 0000				MOV SI,0    ;SI为DECIMAL_BUF数组偏移量
 014D  B9 000A				MOV CX,10   
 0150				TURN_IN:
 0150  33 D2				XOR DX,DX     ;清零，后续存放余数
 0152  F7 F1				DIV CX        ;除10取余得到各个位上的数值
 0154  80 C2 30				ADD DL,30H    ;余数转换为ASCII
 0157  88 94 0388 R			MOV DECIMAL_BUF[SI],DL   ;存入数组
 015B  46				INC SI
 015C  83 F8 00				CMP AX,0      ;商为0则算法结束
 015F  77 EF				JA TURN_IN
					
 0161  8D 16 0063 R			LEA DX,TIPS_D ;输出提示语
 0165  B4 09			    MOV AH,9
 0167  CD 21			    INT 21H		
 0169				TURN_OUT: 
 0169  4E				DEC SI                  ;SI为元素个数 
 016A  8A 94 0388 R		    MOV DL,DECIMAL_BUF[SI]  ;按存放逆序输出即为正序
 016E  B4 02			    MOV AH,2                ;依次输出各个数位上的数值
 0170  CD 21			    INT 21H
 0172  83 FE 00			    CMP SI,0               ;SI为0说明最后一个数已输出
 0175  75 F2			    JNZ TURN_OUT
				    
 0177  E8 FF03			    CALL PRINT_LINE   ;换行
 017A  C3				RET              ;返回
 017B				PRINT_DECIMAL ENDP

 017B				OVER:
 017B  E8 FEFF				CALL PRINT_LINE  ;换行
 017E  E9 FE7F				JMP START    ;重新开始
					    
 0181  B4 4C			    MOV AH,4CH
 0183  CD 21			    INT 21H
 0185				CODES ENDS
				    END START
Microsoft (R) Macro Assembler Version 6.11		    05/30/22 17:10:28
test3.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 0185	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0392	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0040	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

INPUT  . . . . . . . . . . . . .	P Near	 0086	  CODES	Length= 003B Public
  CHECK  . . . . . . . . . . . .	L Near	 0096	  CODES	
  AGAIN  . . . . . . . . . . . .	L Near	 00B1	  CODES	
  ERROR  . . . . . . . . . . . .	L Near	 00B5	  CODES	
  OVER1  . . . . . . . . . . . .	L Near	 00C0	  CODES	
PRINT_BINARY . . . . . . . . . .	P Near	 00C1	  CODES	Length= 0074 Public
  COMPER1  . . . . . . . . . . .	L Near	 00C7	  CODES	
  CHANGE1  . . . . . . . . . . .	L Near	 00D5	  CODES	
  CHANGE2  . . . . . . . . . . .	L Near	 00D9	  CODES	
  CHANGE3  . . . . . . . . . . .	L Near	 00DD	  CODES	
  LOP  . . . . . . . . . . . . .	L Near	 00DF	  CODES	
  TRANS1 . . . . . . . . . . . .	L Near	 00EA	  CODES	
  TRANS2 . . . . . . . . . . . .	L Near	 0104	  CODES	
  OVER2  . . . . . . . . . . . .	L Near	 0134	  CODES	
PRINT_DECIMAL  . . . . . . . . .	P Near	 0135	  CODES	Length= 0046 Public
  TO_BIN . . . . . . . . . . . .	L Near	 013A	  CODES	
  TURN_IN  . . . . . . . . . . .	L Near	 0150	  CODES	
  TURN_OUT . . . . . . . . . . .	L Near	 0169	  CODES	
PRINT_LINE . . . . . . . . . . .	P Near	 007D	  CODES	Length= 0009 Public


Symbols:

                N a m e                 Type     Value    Attr

BINARY_BUF . . . . . . . . . . .	Byte	 0289	  DATAS	
BUF1 . . . . . . . . . . . . . .	Byte	 0087	  DATAS	
BUF2 . . . . . . . . . . . . . .	Byte	 0188	  DATAS	
DECIMAL_BUF  . . . . . . . . . .	Byte	 0388	  DATAS	
LINE . . . . . . . . . . . . . .	Byte	 038F	  DATAS	
NUM  . . . . . . . . . . . . . .	Byte	 038E	  DATAS	
OVER3  . . . . . . . . . . . . .	L Near	 007A	  CODES	
OVER . . . . . . . . . . . . . .	L Near	 017B	  CODES	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
STEP1  . . . . . . . . . . . . .	L Near	 0020	  CODES	
STEP2  . . . . . . . . . . . . .	L Near	 0054	  CODES	
STEP3  . . . . . . . . . . . . .	L Near	 006B	  CODES	
TIPS1  . . . . . . . . . . . . .	Byte	 0000	  DATAS	
TIPS2  . . . . . . . . . . . . .	Byte	 0015	  DATAS	
TIPS3  . . . . . . . . . . . . .	Byte	 002B	  DATAS	
TIPS_B . . . . . . . . . . . . .	Byte	 0045	  DATAS	
TIPS_D . . . . . . . . . . . . .	Byte	 0063	  DATAS	
TIPS_NO  . . . . . . . . . . . .	Byte	 0082	  DATAS	

	   0 Warnings
	   0 Errors
